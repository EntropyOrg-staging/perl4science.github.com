---
layout: page
title: "How to Edit This Site"
date: 2012-07-13 16:00
comments: true
sharing: true
footer: true
---

##Octopress

This site uses [Octopress](http://octopress.org/) to manage and publish a [Jekyll](http://github.com/mojombo/jekyll) site hosted on [GitHub Pages](http://pages.github.com/). While GitHub Pages/Jekyll are cool, they aren't the easiest to use/maintain; that's where Octopress comes in. Before reading on, take a moment to read up on Jekyll and Octopress.

##Structure

An Octopress site is one git repository with (at least) two branches.

* `master` - contains just the published site. This is autogenerated, don't touch it.
* `source` - contains the source documents, the generated documents and the Octopress engine.

The Jekyll-formatted source documents are inside the `source` folder. The configuration is in the `_config.yml` and `Rakefile` files. Some of the style files are in the `sass` folder.

##Fork/clone the repo

Be sure that your system is setup as detailed on the [octopress setup site](http://octopress.org/docs/setup/).

In order to edit the site, either clone the repo (if you have commit rights) or fork if you don't.  Remember, we will only talk aout the `source` branch, be sure you are **always** using it, not `master`.

##Create a new post

Create a new blog post by issuing 

    rake new_post["title"]

This will create a new blog file. It will already contain some metadata in the usual Jekyll way. Under the metadata, add your markdown formatted content. Once the blog is regenerated the post should show up in the blog section of the site.

##Create a new page

Like a new blog post, creating a page is as easy as

    rake new_page["title"]

Again this will create a new file, but it will be in a folder based on the name, the file being `index.markdown`. Once you regenerate the site, the page will be available at `http://perl4science.github.com/title`. There will not be links to it however, so you will need to link to it appropriately. This might involve adding a link to the navbar `source/_includes/custom/navigation.html`, though you should do that infrequently, for obvious space reasons.

##Generate local site from the source

Running

    rake generate

will take the source from the `source` directory and copy it to the `public` directory filling in the data along the way.

##Previewing the site locally

To start a local server to preview the site, run

    rake preview

and then visit the site at `localhost:4000` (or whatever it tells you). You should be able to see the site. When you save source files, it should regenerate the site for you, simply refresh the page to see the result.

##Deploying the site

If you have commit privileges to the main repository, if you issue 

    rake deploy

it should push the local changes to the `master` branch on GitHub and thus it will be publically viewable. Note that in this case you should also commit your changes to the `source` branch and push them.

    git commit -a -m 'message'
    git push origin source

If you don't have commit rights, you should commit, then issue a pull request from your local `source` branch and we will evaluate your changes and hopefully deploy them soon.

